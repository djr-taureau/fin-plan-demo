<?xml version="1.0" encoding="UTF-8" standalone="yes"?>
<TrustFrameworkPolicy xmlns="http://schemas.microsoft.com/online/cpim/schemas/2013/06" 
  xmlns:xsd="http://www.w3.org/2001/XMLSchema" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" PolicySchemaVersion="0.3.0.0" TenantId="lifeworksDev.onmicrosoft.com" PolicyId="B2C_1A_base" PublicPolicyUri="http://lifeworksDev.onmicrosoft.com">

  <BuildingBlocks>
    <ClaimsSchema>
      <!-- The following claim types are required for the user journeys. -->
      <ClaimType Id="alternativeSecurityId">
        <DisplayName>Alternative Security ID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="authenticationSource">
        <DisplayName>Authentication Source</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="countryCode">
        <DisplayName>Country</DisplayName>
        <DataType>string</DataType>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="displayName">
        <DisplayName>Display Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/name" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="email">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="email" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="email" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/email" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9.!#$%&amp;'^_`{}~-]+@[a-zA-Z0-9-]+(?:\.[a-zA-Z0-9-]+)*$" HelpText="Enter a valid email address." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="executed-PhoneFactor-Input">
        <DisplayName>Executed Phone Factor Input</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="executed-SelfAsserted-Input">
        <DisplayName>Executed Self Asserted Input</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="givenName">
        <DisplayName>Given Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="given_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="given_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/givenname" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="identityProvider">
        <DisplayName>Identity Provider</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="idp" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="idp" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/identityprovider" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="isActivePhoneFactorSession">
        <DisplayName>Is Active Phone Factor Session</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="mailNickname">
        <DisplayName>Mail Nickname</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="newPassword">
        <DisplayName>New Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText="8-16 characters, containing 3 out of 4 of the following: Lowercase characters, uppercase characters, digits (0-9), and one or more of the following symbols: @ # $ % ^ &amp; * - _ + = [ ] { } | \ : ' , ? / ` ~ &quot; ( ) ; ." />
        </Restriction>
      </ClaimType>
      <ClaimType Id="newUser">
        <DisplayName>New User</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="objectId">
        <DisplayName>Object ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="oid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="oid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/objectidentifier" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="otherMails">
        <DisplayName>Alternate Email Addresses</DisplayName>
        <DataType>stringCollection</DataType>
      </ClaimType>
      <ClaimType Id="password">
        <DisplayName>Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
      </ClaimType>
      <ClaimType Id="passwordPolicies">
        <DisplayName>Password Policies</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="reenterPassword">
        <DisplayName>Confirm New Password</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Password</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^((?=.*[a-z])(?=.*[A-Z])(?=.*\d)|(?=.*[a-z])(?=.*[A-Z])(?=.*[^A-Za-z0-9])|(?=.*[a-z])(?=.*\d)(?=.*[^A-Za-z0-9])|(?=.*[A-Z])(?=.*\d)(?=.*[^A-Za-z0-9]))([A-Za-z\d@#$%^&amp;*\-_+=[\]{}|\\:',?/`~&quot;();!]|\.(?!@)){8,16}$" HelpText=" " />
        </Restriction>
      </ClaimType>
      <ClaimType Id="signInName">
        <DisplayName>Sign-in name</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="signInNameIsSameAsEmail">
        <DisplayName>Sign-in Name is same as Email Address</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="signInNameIsSameAsPhone">
        <DisplayName>Sign-in Name is same as Phone Number</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="signInNames.emailAddress">
        <DisplayName>Email Address</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="signInNames.phoneNumber">
        <DisplayName>Phone Number</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationPhoneNumber">
        <DisplayName>Phone Number</DisplayName>
        <DataType>string</DataType>
        <Mask Type="Simple">XXX-XXX-</Mask>
      </ClaimType>
      <ClaimType Id="sub">
        <DisplayName>Subject</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="sub" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="sub" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/nameidentifier" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="surname">
        <DisplayName>Surname</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="family_name" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="family_name" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/surname" />
        </DefaultPartnerClaimTypes>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="tenantId">
        <DisplayName>Tenant ID</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tid" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tid" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.microsoft.com/identity/claims/tenantid" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="userId">
        <DisplayName>User ID</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
        <Restriction>
          <Pattern RegularExpression="^[a-zA-Z0-9]+[a-zA-Z0-9_-]*$" HelpText="The user ID you have entered is not valid. It must begin with a letter or a digit and it can contain letters, digits and the following symbols: _ -" />
        </Restriction>
      </ClaimType>
      <ClaimType Id="userName">
        <DisplayName>User Name</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="userPrincipalName">
        <DisplayName>User Principal Name</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="upn" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="upn" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/upn" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="Verified.strongAuthenticationPhoneNumber">
        <DisplayName>Verified Phone Number</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="phone_number" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="phone_number" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/mobilephone" />
        </DefaultPartnerClaimTypes>
        <Mask Type="Simple">XXX-XXX-</Mask>
      </ClaimType>
      <!-- The following claim types are required for the claims exchanges. -->
      <ClaimType Id="client_id">
        <DisplayName>client_id</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="displayNameFromSocialAccount">
        <DisplayName>Display Name from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="emailFromSocialAccount">
        <DisplayName>Email from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="fromMailAddress">
        <DisplayName>From Mail Address</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="givenNameFromSocialAccount">
        <DisplayName>Given Name from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="grant_type">
        <DisplayName>grant_type</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="nca">
        <DisplayName>nca</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="objectIdFromSession">
        <DisplayName>objectIdFromSession</DisplayName>
        <DataType>boolean</DataType>
      </ClaimType>
      <ClaimType Id="prompt">
        <DisplayName>prompt</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="scope">
        <DisplayName>scope</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationAppCode">
        <DisplayName>Verified App Code</DisplayName>
        <DataType>string</DataType>
        <UserInputType>TextBox</UserInputType>
      </ClaimType>
      <ClaimType Id="strongAuthenticationAppQRCodeBitmap">
        <DisplayName>Verified App QR Code Bitmap</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="surnameFromSocialAccount">
        <DisplayName>Surname from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="toMailAddress">
        <DisplayName>To Mail Address</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="tosVersionChanged">
        <DisplayName>Indicates if the TOS version accepted by the end user is equal to the current version</DisplayName>
        <DataType>boolean</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tos_changed" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tos_changed" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/toschanged" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="publishedTosVersion">
        <DisplayName>Published TOS Verion</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <!-- The following claim types can be collected from the end users, managed in the Azure Active Directory store, and sent as
           claims in the security tokens. -->
      <ClaimType Id="extension_ActivationStatus">
        <DisplayName>Activation Status</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="activation_status" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="activation_status" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/activationstatus" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_AuthyId">
        <DisplayName>Authy Id</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_Brand">
        <DisplayName>Brand</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="brand" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="brand" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/brand" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_Gender">
        <DisplayName>Gender</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="gender" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="gender" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.xmlsoap.org/ws/2005/05/identity/claims/gender" />
        </DefaultPartnerClaimTypes>
        <UserInputType>DropdownSingleSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_GenderFromSocialAccount">
        <DisplayName>Gender from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_MarketingConsented">
        <DisplayName>Marketing Consented</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="marketing_consented" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="marketing_consented" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/marketingconsented" />
        </DefaultPartnerClaimTypes>
        <UserInputType>CheckboxMultiSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_Nonce">
        <DisplayName>Nonce</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="nonce" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="nonce" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/nonce" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_Picture">
        <DisplayName>Picture</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="picture" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="picture" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/picture" />
        </DefaultPartnerClaimTypes>
      </ClaimType>
      <ClaimType Id="extension_PictureFromSocialAccount">
        <DisplayName>Picture from Social Account</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_StrongAuthenticationAppSecretKey">
        <DisplayName>Verified App Secret Key</DisplayName>
        <DataType>string</DataType>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_StrongAuthenticationAppTimeStepMatched">
        <DisplayName>Verified App Time Step Matched</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="extension_TermsOfServiceConsented">
        <DisplayName>Terms of Service Consented</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="tos_consented" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="tos_consented" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/tosconsented" />
        </DefaultPartnerClaimTypes>
        <UserInputType>CheckboxMultiSelect</UserInputType>
      </ClaimType>
      <ClaimType Id="extension_VerifiedEmail">
        <DisplayName>Verified Email</DisplayName>
        <DataType>string</DataType>
        <DefaultPartnerClaimTypes>
          <Protocol Name="OAuth2" PartnerClaimType="verified_email" />
          <Protocol Name="OpenIdConnect" PartnerClaimType="verified_email" />
          <Protocol Name="SAML2" PartnerClaimType="http://schemas.lifeworksapp.com/identity/claims/verifiedemail" />
        </DefaultPartnerClaimTypes>
        <UserInputType>Readonly</UserInputType>
      </ClaimType>
      <!-- App Insights -->
      <ClaimType Id="EventType">
        <DisplayName>EventType</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="PolicyId">
        <DisplayName>PolicyId</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="Culture">
        <DisplayName>Culture</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="CorrelationId">
        <DisplayName>CorrelationId</DisplayName>
        <DataType>string</DataType>
        <AdminHelpText />
        <UserHelpText />
      </ClaimType>
      <!--Additional claims used for passing claims to Application Insights Provider -->
      <ClaimType Id="federatedUser">
        <DisplayName>federatedUser</DisplayName>
        <DataType>boolean</DataType>
        <UserHelpText />
      </ClaimType>
      <ClaimType Id="parsedDomain">
        <DisplayName>Parsed Domain</DisplayName>
        <DataType>string</DataType>
        <UserHelpText>The domain portion of the email address.</UserHelpText>
      </ClaimType>
      <ClaimType Id="userInLocalDirectory">
        <DisplayName>userInLocalDirectory</DisplayName>
        <DataType>boolean</DataType>
        <UserHelpText />
      </ClaimType>

      <ClaimType Id="lwUserGuid">
        <DisplayName>Lifeworks System User GUID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="lwClientGuid">
        <DisplayName>Lifeworks System User Client GUID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="lwFirmClientGuid">
        <DisplayName>Lifeworks System User Firm Client GUID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="lwFirmGuid">
        <DisplayName>Lifeworks System User Firm GUID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="lwFirmAccountGuid">
        <DisplayName>Lifeworks System User Firm Account GUID</DisplayName>
        <DataType>string</DataType>
      </ClaimType>
      <ClaimType Id="lwUserPermissions">
        <DisplayName>Lifeworks user claims</DisplayName>
        <DataType>stringCollection</DataType>
      </ClaimType>
    </ClaimsSchema>

    <ClaimsTransformations>
      <ClaimsTransformation Id="CompareSignInNameAndEmailClaims" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="signInNames.emailAddress" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="equal" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="signInNameIsSameAsEmail" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <ClaimsTransformation Id="CompareSignInNameAndPhoneClaims" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="signInName" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="signInNames.phoneNumber" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="equal" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="signInNameIsSameAsPhone" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative security identifier for an external user. -->
      <ClaimsTransformation Id="CreateAlternativeSecurityId" TransformationMethod="CreateAlternativeSecurityId">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userId" TransformationClaimType="key" />
          <InputClaim ClaimTypeReferenceId="identityProvider" TransformationClaimType="identityProvider" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="alternativeSecurityId" TransformationClaimType="alternativeSecurityId" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address for an external user. -->
      <ClaimsTransformation Id="CreateEmailFromEmailFromSocialAccount" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address for a user. -->
      <ClaimsTransformation Id="CreateEmailFromVerifiedEmail" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="email" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation generates the user name for an external user. -->
      <ClaimsTransformation Id="CreateExternalUserName" TransformationMethod="CreateRandomString">
        <InputParameters>
          <InputParameter Id="randomGeneratorType" DataType="string" Value="GUID" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="userName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation formats the user principal name for an external user. -->
      <ClaimsTransformation Id="CreateExternalUserPrincipalName" TransformationMethod="FormatStringClaim">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="userName" TransformationClaimType="inputClaim" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{0}@{RelyingPartyTenantId}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="userPrincipalName" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the mail address from which a mail message is sent to a user. -->
      <ClaimsTransformation Id="CreateFromMailAddress" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="no-reply@getlifeworks.com" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="fromMailAddress" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative mail addresses for an external user. -->
      <ClaimsTransformation Id="CreateOtherMailsFromEmail" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="email" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the alternative mail addresses for an external user. -->
      <ClaimsTransformation Id="CreateOtherMailsFromEmailFromSocialAccount" TransformationMethod="AddItemToStringCollection">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" TransformationClaimType="item" />
          <InputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </InputClaims>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="otherMails" TransformationClaimType="collection" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation creates the subject for a user. -->
      <ClaimsTransformation Id="CreateSubject" TransformationMethod="CreateStringClaim">
        <InputParameters>
          <InputParameter Id="value" DataType="string" Value="Not supported currently. Use oid claim." />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="sub" TransformationClaimType="createdClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims  -->
      <ClaimsTransformation Id="CompareUserTosWithPublishedTos" TransformationMethod="CompareClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="publishedTosVersion" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="operator" DataType="string" Value="NOT EQUAL" />
          <InputParameter Id="ignoreCase" DataType="string" Value="true" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="tosVersionChanged" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
      <!-- The following claims transformation updates the users Terms of Service Consented. -->
      <ClaimsTransformation Id="UpdateTermsOfServiceConsentedWithPublishedTOSVersion" TransformationMethod="FormatStringMultipleClaims">
        <InputClaims>
          <InputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" TransformationClaimType="inputClaim1" />
          <InputClaim ClaimTypeReferenceId="publishedTosVersion" TransformationClaimType="inputClaim2" />
        </InputClaims>
        <InputParameters>
          <InputParameter Id="stringFormat" DataType="string" Value="{1}" />
        </InputParameters>
        <OutputClaims>
          <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" TransformationClaimType="outputClaim" />
        </OutputClaims>
      </ClaimsTransformation>
    </ClaimsTransformations>

    <ContentDefinitions>
      <!-- The following content definition is used for errors. -->
      <ContentDefinition Id="api.error">
        <LoadUri>~/tenant/default/exception.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:globalexception:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Error page</Item>
        </Metadata>
      </ContentDefinition>
      <!-- The following content definition is used for selecting an identity provider. -->
      <ContentDefinition Id="api.idpselection.signin">
        <LoadUri>~/tenant/default/idpselector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Identity provider selection page</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.idpselection.signin.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for selecting an identity provider. -->
      <ContentDefinition Id="api.idpselection.signupsignin">
        <LoadUri>~/tenant/default/idpselector.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:idpselection:1.0.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Identity provider selection page</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.idpselection.signupsignin.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a local account via an activation link. -->
      <ContentDefinition Id="api.localaccount.activation">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Recovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.activation.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <ContentDefinition Id="api.localaccount.discovery">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Discovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.discovery.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account. -->
      <ContentDefinition Id="api.localaccount.login">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.login.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an app code. -->
      <ContentDefinition Id="api.localaccount.login.appcode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.login.appcode.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an Authy code. -->
      <ContentDefinition Id="api.localaccount.login.authycode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.login.authycode.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using an e-mail code. -->
      <ContentDefinition Id="api.localaccount.login.emailcode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.login.emailcode.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a local account using a phone code. -->
      <ContentDefinition Id="api.localaccount.login.phonecode">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Login</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.login.phonecode.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for recovering the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordrecovery">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Recovery</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.passwordrecovery.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for resetting the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordreset">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Reset</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.passwordreset.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for setting the password for a local account. -->
      <ContentDefinition Id="api.localaccount.passwordset">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Password Set</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.passwordset.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a local account. -->
      <ContentDefinition Id="api.localaccount.registration">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Local Account Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.localaccount.registration.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering, validating, and verifying a verification phone. -->
      <ContentDefinition Id="api.phonefactor">
        <LoadUri>~/tenant/default/multifactor-1.0.0.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:multifactor:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Phone Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.phonefactor.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a verification app. -->
      <ContentDefinition Id="api.selfasserted.appfactor.registration">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">App Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.appfactor.registration.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for verifying a verification app. -->
      <ContentDefinition Id="api.selfasserted.appfactor.verification">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">App Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.appfactor.verification.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering, validating, and verifying an Authy account. -->
      <ContentDefinition Id="api.selfasserted.authyfactor">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Authy Factor</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.authyfactor.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for updating the consent for a user. -->
      <ContentDefinition Id="api.selfasserted.consent">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Consent</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.consent.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a user. -->
      <ContentDefinition Id="api.selfasserted.registration">
        <LoadUri>~/tenant/default/selfasserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Profile Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.registration.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for updating the profile for a user. -->
      <ContentDefinition Id="api.selfasserted.profileupdate">
        <LoadUri>~/tenant/default/updateProfile.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Profile Update</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.selfasserted.profileupdate.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for logging in a user. -->
      <ContentDefinition Id="api.signupsignin">
        <LoadUri>~/tenant/default/unified.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:unifiedssp:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Account Login or Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.signupsignin.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
      <!-- The following content definition is used for registering a social account. -->
      <ContentDefinition Id="api.socialaccount.registration">
        <LoadUri>~/tenant/default/selfAsserted.cshtml</LoadUri>
        <RecoveryUri>~/common/default_page_error.html</RecoveryUri>
        <DataUri>urn:com:microsoft:aad:b2c:elements:selfasserted:1.1.0</DataUri>
        <Metadata>
          <Item Key="DisplayName">Social Account Registration</Item>
        </Metadata>
        <LocalizedResourcesReferences MergeBehavior="Prepend">
          <LocalizedResourcesReference Language="en" LocalizedResourcesReferenceId="api.socialaccount.registration.en" />
        </LocalizedResourcesReferences>
      </ContentDefinition>
    </ContentDefinitions>

    <Localization Enabled="true">
      <SupportedLanguages DefaultLanguage="en" MergeBehavior="ReplaceAll">
        <SupportedLanguage>en</SupportedLanguage>
      </SupportedLanguages>
      <LocalizedResources Id="api.idpselection.signin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Sign in with your existing account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.idpselection.signupsignin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="intro">Sign in with your social account or create a Lifeworks account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.activation.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Confirm your email address.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're preparing your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.discovery.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Next</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Email address or phone number</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Sign in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're signing you in</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="signInName" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.appcode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.authycode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your Authy account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.emailcode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Sign in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send sign-in code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a sign-in code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Sign-in code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now sign in.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're signing you in</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.login.phonecode.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're finding your phone number</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordrecovery.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your email address and we'll send you a verification code.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a verification code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now continue.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're preparing your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordreset.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your new password.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're resetting your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.passwordset.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Enter your new password.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're setting your password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.localaccount.registration.en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" TargetCollection="Restriction">
            <Item Text="I am agree to the Lifeworks terms of service" Value="1" />
          </LocalizedCollection>
        </LocalizedCollections>
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Create your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="required_field">You must enter this field</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_edit">Change</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_resend">Send another</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_verify">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_but_send">Send verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_info_msg">We've sent you a verification code. Copy it to the input field below.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_input">Verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="ver_success_msg">We've verified your email address. You can now continue.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're creating your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="email" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_VerifiedEmail" StringId="DisplayName">Email address</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="newPassword" StringId="DisplayName">New password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="reenterPassword" StringId="DisplayName">Confirm new password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="displayName" StringId="DisplayName">Display name</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.phonefactor.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_send_code">Text me</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="button_verify">Call me</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="country_code_label">Country code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="enter_code_text_intro">Enter the verification code or </LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_entry_mixed">Enter your phone number and we'll send you a verification code by either a text message or a phone call.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="intro_mixed">We have your phone number. We'll send you a verification code by either a text message or a phone call.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_number">You must enter a valid phone number</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="number_label">Phone number</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="text_button_send_second_code">send another verification code</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="error_incorrect_code">You must enter the verification code that we sent you</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.registration.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro"></LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're registering your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">3. Enter the verification code</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.appfactor.verification.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Verify</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Get a verification code from your authentication app.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're verifying your authentication app</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="strongAuthenticationAppCode" StringId="DisplayName">Enter the verification code</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.authyfactor.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Send</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Send an approval request to your Authy account.</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're waiting for you to approve the approval request</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.consent.en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" TargetCollection="Restriction">
            <Item Text="I am agree to the Lifeworks terms of service" Value="1" />
          </LocalizedCollection>
        </LocalizedCollections>
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Before you can continue using our online services, you must agree to the Lifeworks terms of service.</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" StringId="DisplayName">Accept terms of service</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.profileupdate.en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingConsented" TargetCollection="Restriction">
            <Item Text="I am agreeing to receiving promotional offers by email" Value="true" />
          </LocalizedCollection>
        </LocalizedCollections>
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Update</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Update your Lifeworks profile</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're updating your Lifeworks profile</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.selfasserted.registration.en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_MarketingConsented" TargetCollection="Restriction">
            <Item Text="I am agreeing to receiving promotional offers by email" Value="true" />
          </LocalizedCollection>
        </LocalizedCollections>
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Create</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Create your Lifeworks profile</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're creating your Lifeworks profile</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.signupsignin.en">
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="createaccount_intro">Don't have an account?</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="createaccount_link">Signup now</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_email">You must enter a valid email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="invalid_password">You must enter a valid password</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="local_intro_email">Sign in with your Lifeworks account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="logonIdentifier_email">Email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="remember_me">Keep me signed in</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_email">You must enter an email address</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="requiredField_password">You must enter a password</LocalizedString>
          <LocalizedString ElementType="ClaimType" ElementId="password" StringId="DisplayName">Password</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
      <LocalizedResources Id="api.socialaccount.registration.en">
        <LocalizedCollections>
          <LocalizedCollection ElementType="ClaimType" ElementId="extension_TermsOfServiceConsented" TargetCollection="Restriction">
            <Item Text="I am agree to the Lifeworks terms of service" Value="1" />
          </LocalizedCollection>
        </LocalizedCollections>
        <LocalizedStrings>
          <LocalizedString ElementType="UxElement" StringId="button_continue">Register</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="initial_intro">Register your social account</LocalizedString>
          <LocalizedString ElementType="UxElement" StringId="verifying_blurb">We're registering your social account</LocalizedString>
        </LocalizedStrings>
      </LocalizedResources>
    </Localization>
  </BuildingBlocks>

  <ClaimsProviders>
    <!-- // BEGIN Social Auth Providers //-->
    <!-- The following claims provider defines the Google identity provider. -->
    <ClaimsProvider>
      <Domain>google.com</Domain>
      <DisplayName>Google Account</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="GoogleAccount-OAuth2">
          <DisplayName>Google</DisplayName>
          <Protocol Name="OAuth2" />
          <Metadata>
            <Item Key="ProviderName">google</Item>
            <Item Key="authorization_endpoint">https://accounts.google.com/o/oauth2/auth</Item>
            <Item Key="AccessTokenEndpoint">https://accounts.google.com/o/oauth2/token</Item>
            <Item Key="ClaimsEndpoint">https://www.googleapis.com/oauth2/v1/userinfo</Item>
            <Item Key="scope">email</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="client_id">840389013888-a97k85d0lc5emb61t3j9vbmc89k5nfmd.apps.googleusercontent.com</Item>
            <Item Key="AccessTokenResponseFormat">json</Item>
            <Item Key="UsePolicyInRedirectUri">0</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="client_secret" StorageReferenceId="B2C_1A_GoogleSecret" />
          </CryptographicKeys>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="identityProvider" DefaultValue="google.com" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="socialAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="emailFromSocialAccount" PartnerClaimType="email" />
            <OutputClaim ClaimTypeReferenceId="userId" PartnerClaimType="id" />
            <OutputClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="gender" />
            <OutputClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="picture" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateAlternativeSecurityId" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserName" />
            <OutputClaimsTransformation ReferenceId="CreateExternalUserPrincipalName" />
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-SocialLogin" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
    <!-- // END Social Auth Providers //-->

    <!-- The following claims provider defines the Azure Application Insights provider -->
    <ClaimsProvider>
      <DisplayName>Application Insights</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="Insights-SignInRequest">
          <InputClaims>
            <!-- An input claim with a PartnerClaimType="eventName" is required. This is used by the AzureApplicationInsightsProvider to create an event with the specified value. -->
            <InputClaim ClaimTypeReferenceId="EventType" PartnerClaimType="eventName" DefaultValue="SignInRequest" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="Insights-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="Insights-SignInComplete">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="EventType" PartnerClaimType="eventName" DefaultValue="SignInComplete" />
            <InputClaim ClaimTypeReferenceId="federatedUser" PartnerClaimType="{property:FederatedUser}" DefaultValue="false" />
            <InputClaim ClaimTypeReferenceId="parsedDomain" PartnerClaimType="{property:FederationPartner}" DefaultValue="Not Applicable" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="Insights-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="Insights-UserSignup">
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="EventType" PartnerClaimType="eventName" DefaultValue="UserSignup" />
          </InputClaims>
          <IncludeTechnicalProfile ReferenceId="Insights-Common" />
        </TechnicalProfile>
        <TechnicalProfile Id="Insights-Common">
          <DisplayName>Alternate Email</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.Insights.AzureApplicationInsightsProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="InstrumentationKey">0e62a777-c546-4214-84ca-7917c5b261ff</Item>
            <Item Key="DeveloperMode">true</Item>
            <Item Key="DisableTelemetry">false</Item>
          </Metadata>
          <InputClaims>
            <!-- Properties of an event are added through the syntax {property:NAME}, where NAME is property being added to the event. DefaultValue can be either a static value or a value that's resolved by one of the supported DefaultClaimResolvers. -->
            <InputClaim ClaimTypeReferenceId="PolicyId" PartnerClaimType="{property:Policy}" DefaultValue="{Policy:PolicyId}" />
            <InputClaim ClaimTypeReferenceId="CorrelationId" PartnerClaimType="{property:JourneyId}" />
            <InputClaim ClaimTypeReferenceId="Culture" PartnerClaimType="{property:Culture}" DefaultValue="{Culture:RFC5646}" />
          </InputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- // BEGIN Two Factor Auth Providers //-->
    <!-- The following claims provider defines the App Factor provider. -->
    <ClaimsProvider>
      <DisplayName>App Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a verification phone. -->
        <TechnicalProfile Id="AppFactor-Input">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.appfactor.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="API-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />-->
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="AppFactor-Verify">
          <DisplayName>App Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.appfactor.verification</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="API-VerifyTotpWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />-->
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <ClaimsProvider>
      <DisplayName>Authy Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers an Authy phone. -->
        <TechnicalProfile Id="AuthyFactor-InputOrVerify">
          <DisplayName>Authy Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.authyfactor</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
            <InputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="API-CreateAndWaitForAuthyApprovalRequestWebHook" />
          </ValidationTechnicalProfiles>
          <!--<UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />-->
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the Azure Active Directory identity store. -->
    <ClaimsProvider>
      <DisplayName>Azure Active Directory Store</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the common properties for the Azure Active Directory identity store. -->
        <TechnicalProfile Id="AAD-Common">
          <DisplayName>Azure Active Directory Store</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.AzureActiveDirectoryProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ApplicationObjectId">5339fe93-b043-4df0-b223-a1c564790fe3</Item>
            <Item Key="ClientId">a8edece2-c777-46ad-8840-75ee879a5b70</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the alternative security identifier for the user, from the
             Azure Active Directory identity store. -->
        <TechnicalProfile Id="AAD-ReadUserByAlternativeSecurityId">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" PartnerClaimType="alternativeSecurityId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_Brand" />
            <OutputClaim ClaimTypeReferenceId="extension_Gender" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_Picture" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the email address for the user, from the Azure Active Directory
             identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-ReadUserByEmail-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="otherMails" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>

        <TechnicalProfile Id="AAD-ReadUserByEmailOrPhone-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">An account could not be found for the provided user ID.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="signInNames" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="signInNames.phoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile reads a user, identified by the object identifier for the user, from the Azure Active
             Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-ReadUserByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Read</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">User does not exist. You must sign up before you can sign in.</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_Brand" />
            <OutputClaim ClaimTypeReferenceId="extension_Gender" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
            <OutputClaim ClaimTypeReferenceId="extension_Picture" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the social account profile for a user, identified by the object identifier for
             the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserAccountProfileByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the social account for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserAlternativeAccountByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the verification app for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserAppByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <PersistedClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the Authy account for a user, identified by the object identifier for the user,
             in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserAuthyByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_AuthyId" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile creates a user, identified by the alternative security identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user already exists. -->
        <TechnicalProfile Id="AAD-WriteUserByAlternativeSecurityId-ThrowIfExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered. Select the back button and sign in.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateOtherMailsFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <PersistedClaim ClaimTypeReferenceId="displayNameFromSocialAccount" PartnerClaimType="displayName" />
            <PersistedClaim ClaimTypeReferenceId="givenNameFromSocialAccount" PartnerClaimType="givenName" />
            <PersistedClaim ClaimTypeReferenceId="mailNickname" DefaultValue="Unknown" />
            <PersistedClaim ClaimTypeReferenceId="otherMails" />
            <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
            <PersistedClaim ClaimTypeReferenceId="surnameFromSocialAccount" PartnerClaimType="surname" />
            <PersistedClaim ClaimTypeReferenceId="userPrincipalName" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_Brand" />
            <PersistedClaim ClaimTypeReferenceId="extension_GenderFromSocialAccount" PartnerClaimType="extension_Gender" />
            <PersistedClaim ClaimTypeReferenceId="extension_PictureFromSocialAccount" PartnerClaimType="extension_Picture" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile creates a user, identified by the email address for the user, in the Azure Active Directory
             identity store. An error is raised if the user already exists. -->
        <TechnicalProfile Id="AAD-WriteUserByEmail-ThrowIfExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalAlreadyExists">true</Item>
            <Item Key="UserMessageIfClaimsPrincipalAlreadyExists">You are already registered. Select the back button and sign in.</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="displayName" />
            <PersistedClaim ClaimTypeReferenceId="email" PartnerClaimType="signInNames.emailAddress" />
            <PersistedClaim ClaimTypeReferenceId="givenName" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <PersistedClaim ClaimTypeReferenceId="passwordPolicies" DefaultValue="DisablePasswordExpiration" />
            <PersistedClaim ClaimTypeReferenceId="surname" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
            <PersistedClaim ClaimTypeReferenceId="extension_Brand" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newUser" PartnerClaimType="newClaimsPrincipalCreated" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile updates the consent for a user, identified by the object identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserConsentByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="UpdateTermsOfServiceConsentedWithPublishedTOSVersion" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the password for a user, identified by the object identifier for the user, in the
             Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserPasswordByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the verification phone number for a user, identified by the object identifier for
             the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserPhoneNumberByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
        <!-- The following technical profile updates the local account profile for a user, identified by the object identifier for the
             user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <TechnicalProfile Id="AAD-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists">
          <Metadata>
            <Item Key="Operation">Write</Item>
            <Item Key="RaiseErrorIfClaimsPrincipalDoesNotExist">true</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
          </InputClaims>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="extension_MarketingConsented" />
          </PersistedClaims>
          <IncludeTechnicalProfile ReferenceId="AAD-Common" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the Azure Functions REST provider. -->
    <ClaimsProvider>
      <DisplayName>API Functions</DisplayName>
      <TechnicalProfiles>
        <TechnicalProfile Id="API-UserGuid">
          <DisplayName>Get the authenticated user's Lifeworks UserGuid</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/auth/auth-getUserGuid</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="aadGuid" />
            <InputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="aadFirstName" />
            <InputClaim ClaimTypeReferenceId="surName" PartnerClaimType="aadLastName" />
            <InputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="aadDisplayName" />
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="aadEmail" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="lwUserGuid" PartnerClaimType="lwUserGuid" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="API-UserContext">
          <DisplayName>Get the authenticated user's Lifeworks context guids</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/auth/auth-getUserContextGuids</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="lwUserGuid" PartnerClaimType="lwUserGuid" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="lwClientGuid" PartnerClaimType="lwClientGuid" />
            <OutputClaim ClaimTypeReferenceId="lwFirmGuid" PartnerClaimType="lwFirmGuid" />
            <OutputClaim ClaimTypeReferenceId="lwFirmClientGuid" PartnerClaimType="lwFirmClientGuid" />
            <OutputClaim ClaimTypeReferenceId="lwFirmAccountGuid" PartnerClaimType="lwFirmAccountGuid" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="API-UserPermissions">
          <DisplayName>Get the Authenticated user's Lifeworks permissions</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/auth/auth-getUserPermissions</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="lwUserGuid" PartnerClaimType="lwUserGuid" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="lwUserPermissions" PartnerClaimType="lwUserPermissions" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <TechnicalProfile Id="API-GetTosVersion">
          <DisplayName>Get the published TOC Version</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/auth/tos/version</Item>
          </Metadata>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="publishedTosVersion" PartnerClaimType="version" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CompareUserTosWithPublishedTos" />
          </OutputClaimsTransformations>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>

        <!-- The following technical profile checks whether the email address that is associated with a social account matches the email
             address that is associated with an invitation link. -->
        <TechnicalProfile Id="API-CheckEmailWebHook">
          <DisplayName>Check Email Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/CheckEmailWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="emailFromSocialAccount" PartnerClaimType="emailFromSocialAccount" />
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" PartnerClaimType="verifiedEmail" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile creates an Authy approval request and waits for it to be completed. -->
        <TechnicalProfile Id="API-CreateAndWaitForAuthyApprovalRequestWebHook">
          <DisplayName>Create Authy User Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/CreateAndWaitForAuthyApprovalRequestWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <InputClaim ClaimTypeReferenceId="extension_AuthyId" PartnerClaimType="authyId" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile creates an Authy user. -->
        <TechnicalProfile Id="API-CreateAuthyUserWebHook">
          <DisplayName>Create Authy User Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/CreateAuthyUserWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="email" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" PartnerClaimType="phoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" PartnerClaimType="authyId" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile generates a time-based one-time password (TOTP). -->
        <TechnicalProfile Id="API-GenerateTotpWebHook">
          <DisplayName>Generate TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/GenerateTotpWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationAppQRCodeBitmap" PartnerClaimType="qrCodeBitmap" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a time-based one-time password (TOTP). -->
        <TechnicalProfile Id="API-VerifyTotpWebHook">
          <DisplayName>Verify TOTP Web Hook Azure Function</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://api-dev.onlifeworks.com/VerifyTotpWebHook?code=</Item>
            <Item Key="AuthenticationType">None</Item>
            <Item Key="SendClaimsIn">Body</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="strongAuthenticationAppCode" PartnerClaimType="totpCode" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" PartnerClaimType="secretKey" />
            <InputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" PartnerClaimType="timeStepMatched" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines a REST provider that enables users to be migrated from a SQL identity store to the Azure
         Active Directory identity store and synchronized between these stores. -->
    <ClaimsProvider>
      <DisplayName>Classic Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile is called when a user is logging in. It creates the user in the Azure Active Directory
             identity store if the user does not exist or updates the password for the user in the Azure Active Directory identity store
             if the user does exist. -->
        <!-- <TechnicalProfile Id="ClassicAccount-CheckNonce">
          <DisplayName>Classic Account Check Nonce</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/checknonce</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_verifiedEmail" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="extension_Nonce" PartnerClaimType="nonce" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile> -->
        <!-- The following technical profile is called when a user is logging in. It creates the user in the Azure Active Directory
             identity store if the user does not exist or updates the password for the user in the Azure Active Directory identity store
             if the user does exist. -->
        <!-- <TechnicalProfile Id="ClassicAccount-CheckPassword">
          <DisplayName>Classic Account Check Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/checkpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="password" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile> -->
        <!-- The following technical profile either is called when a user is registering. It creates the user in the SQL identity store
             if the user does not exist or updates the password for the user in the SQL identity store if the user does exist. -->
        <!-- <TechnicalProfile Id="ClassicAccount-Create">
          <DisplayName>Classic Account Create</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="newPassword" PartnerClaimType="password" />
            <InputClaim ClaimTypeReferenceId="displayName" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile> -->
        <!-- The following technical profile is called when a user is recovering a password. It creates the user in the Azure Active
             Directory identity store if the user does not exist. -->
        <!-- <TechnicalProfile Id="ClassicAccount-RecoverPassword">
          <DisplayName>Classic Account Recover Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/recoverpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile> -->
        <!-- The following technical profile is called when a user is resetting a password. It updates the password for the user in
             the SQL identity store. -->
        <!-- <TechnicalProfile Id="ClassicAccount-ResetPassword">
          <DisplayName>Classic Account Reset Password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.RestfulProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ServiceUrl">https://wingtipidentityb2c.azurewebsites.net/api/account/resetpassword</Item>
            <Item Key="AuthenticationType">Basic</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="SendClaimsIn">Form</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="BasicAuthenticationUsername" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientId" />
            <Key Id="BasicAuthenticationPassword" StorageReferenceId="B2C_1A_LifeworksClassicAccountClientSecret" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" PartnerClaimType="userName" />
            <InputClaim ClaimTypeReferenceId="newPassword" />
          </InputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-Noop" />
        </TechnicalProfile> -->
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the local account provider. -->
    <ClaimsProvider>
      <DisplayName>Local Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile activates a local account. -->
        <TechnicalProfile Id="LocalAccount-Activation">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.activation</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromVerifiedEmail" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_VerifiedEmail" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-CheckNonce" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <TechnicalProfile Id="LocalAccount-Discovery">
          <DisplayName>Local Account Discovery</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.discovery</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="signInNames.emailAddress" />
            <OutputClaim ClaimTypeReferenceId="signInNames.phoneNumber" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CompareSignInNameAndEmailClaims" />
            <OutputClaimsTransformation ReferenceId="CompareSignInNameAndPhoneClaims" />
          </OutputClaimsTransformations>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmailOrPhone-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account. -->
        <TechnicalProfile Id="LocalAccount-Login">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login</Item>
            <Item Key="setting.operatingMode">Email</Item>
            <Item Key="SignUpTarget">LocalAccountRegistrationExchange</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="signInName" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="signInName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="password" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-CheckPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="LocalAccount-OpenIdConnect" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an app code. -->
        <TechnicalProfile Id="LocalAccount-Login-AppCode">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.appcode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppSecretKey" />
            <OutputClaim ClaimTypeReferenceId="extension_StrongAuthenticationAppTimeStepMatched" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an Authy code. -->
        <TechnicalProfile Id="LocalAccount-Login-AuthyCode">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.authycode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
            <OutputClaim ClaimTypeReferenceId="extension_AuthyId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using an email code. -->
        <TechnicalProfile Id="LocalAccount-Login-EmailCode">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.emailcode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile logs in a local account using a phone code. -->
        <TechnicalProfile Id="LocalAccount-Login-PhoneCode">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.login.phonecode</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile authenticates a local account. -->
        <TechnicalProfile Id="LocalAccount-OpenIdConnect">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="OpenIdConnect" />
          <Metadata>
            <Item Key="UserMessageIfClaimsPrincipalDoesNotExist">We can't seem to find your account</Item>
            <Item Key="UserMessageIfInvalidPassword">Your password is incorrect</Item>
            <Item Key="UserMessageIfOldPasswordUsed">Looks like you used an old password</Item>
            <Item Key="ProviderName">https://sts.windows.net/</Item>
            <Item Key="HttpBinding">POST</Item>
            <Item Key="METADATA">https://login.microsoftonline.com/{tenant}/.well-known/openid-configuration</Item>
            <Item Key="authorization_endpoint">https://login.microsoftonline.com/{tenant}/oauth2/token</Item>
            <Item Key="scope">openid email</Item>
            <Item Key="response_types">id_token</Item>
            <Item Key="response_mode">query</Item>
            <Item Key="client_id">0e5bcb9f-ed80-44e2-9204-e88af91b23db</Item>
            <Item Key="IdTokenAudience">a8edece2-c777-46ad-8840-75ee879a5b70</Item>
            <Item Key="LocalAccountProfile">true</Item>
            <Item Key="UsePolicyInRedirectUri">false</Item>
          </Metadata>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="client_id" DefaultValue="0e5bcb9f-ed80-44e2-9204-e88af91b23db" />
            <InputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="resource" DefaultValue="a8edece2-c777-46ad-8840-75ee879a5b70" />
            <InputClaim ClaimTypeReferenceId="grant_type" DefaultValue="password" />
            <InputClaim ClaimTypeReferenceId="nca" PartnerClaimType="nca" DefaultValue="1" />
            <InputClaim ClaimTypeReferenceId="password" Required="true" />
            <InputClaim ClaimTypeReferenceId="scope" DefaultValue="openid" />
            <InputClaim ClaimTypeReferenceId="signInName" PartnerClaimType="username" Required="true" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="displayName" PartnerClaimType="name" />
            <OutputClaim ClaimTypeReferenceId="givenName" PartnerClaimType="given_name" />
            <OutputClaim ClaimTypeReferenceId="objectId" PartnerClaimType="oid" />
            <OutputClaim ClaimTypeReferenceId="surname" PartnerClaimType="family_name" />
            <OutputClaim ClaimTypeReferenceId="tenantId" PartnerClaimType="tid" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="upn" />
          </OutputClaims>
          <OutputClaimsTransformations>
            <OutputClaimsTransformation ReferenceId="CreateSubject" />
          </OutputClaimsTransformations>
        </TechnicalProfile>
        <!-- The following technical profile recovers the password for a local account. -->
        <TechnicalProfile Id="LocalAccount-PasswordRecovery">
          <DisplayName>Reset password using email address</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordrecovery</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-RecoverPassword" /> -->
            <ValidationTechnicalProfile ReferenceId="AAD-ReadUserByEmail-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile resets a local account password. -->
        <TechnicalProfile Id="LocalAccount-PasswordReset">
          <DisplayName>Reset password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordreset</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserPasswordByObjectId-ThrowIfNotExists" />
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-ResetPassword" /> -->
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile sets a local account password. -->
        <TechnicalProfile Id="LocalAccount-PasswordSet">
          <DisplayName>Reset password</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.passwordset</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" />
            <InputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserPasswordByObjectId-ThrowIfNotExists" />
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-ResetPassword" /> -->
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile registers a local account. -->
        <TechnicalProfile Id="LocalAccount-Registration-UnverifiedEmail">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.registration</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="email" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="email" PartnerClaimType="Verified.Email" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserByEmail-ThrowIfExists" />
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-Create" /> -->
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile registers a local account. -->
        <TechnicalProfile Id="LocalAccount-Registration-VerifiedEmail">
          <DisplayName>Lifeworks Account</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.localaccount.registration</Item>
            <Item Key="IpAddressClaimReferenceId">IpAddress</Item>
            <Item Key="language.button_continue">Create</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromVerifiedEmail" />
          </InputClaimsTransformations>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="extension_VerifiedEmail" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_VerifiedEmail" Required="true" />
            <OutputClaim ClaimTypeReferenceId="newPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="reenterPassword" Required="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" Required="true" />
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="authenticationSource" DefaultValue="localAccountAuthentication" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
            <OutputClaim ClaimTypeReferenceId="sub" />
            <OutputClaim ClaimTypeReferenceId="userPrincipalName" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserByEmail-ThrowIfExists" />
            <!-- <ValidationTechnicalProfile ReferenceId="ClassicAccount-Create" /> -->
          </ValidationTechnicalProfiles>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the verification phone provider. -->
    <ClaimsProvider>
      <DisplayName>Phone Factor</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-Input">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="countryCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile validates a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-InputOrVerify">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="ManualPhoneNumberEntryAllowed">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="countryCode" Required="true" />
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" PartnerClaimType="Verified.OfficePhone" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-VerifyByAuthenticationPhoneNumber">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />
        </TechnicalProfile>
        <!-- The following technical profile verifies a verification phone. -->
        <TechnicalProfile Id="PhoneFactor-VerifyByPhoneNumberSignInName">
          <DisplayName>Phone Factor</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.PhoneFactorProtocolProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.phonefactor</Item>
            <Item Key="setting.authenticationMode">sms</Item>
            <Item Key="setting.autodial">true</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="userPrincipalName" PartnerClaimType="UserId" />
            <InputClaim ClaimTypeReferenceId="signInNames.phoneNumber" PartnerClaimType="strongAuthenticationPhoneNumber" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="verified.strongAuthenticationPhoneNumber" />
          </OutputClaims>
          <UseTechnicalProfileForSessionManagement ReferenceId="SSO-PhoneFactor" />
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the self-asserted provider. -->
    <ClaimsProvider>
      <DisplayName>Self Asserted</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile updates the consent for a user. -->
        <TechnicalProfile Id="SelfAsserted-Consent">
          <DisplayName>User Consent</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.consent</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="UpdateTermsOfServiceConsentedWithPublishedTOSVersion" />
          </InputClaimsTransformations>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserConsentByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile registers a user. -->
        <TechnicalProfile Id="SelfAsserted-UserRegistration">
          <DisplayName>Local User Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="objectId" Required="true" />
            <InputClaim ClaimTypeReferenceId="displayName" />
            <InputClaim ClaimTypeReferenceId="givenName" />
            <InputClaim ClaimTypeReferenceId="surname" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="displayName" />
            <OutputClaim ClaimTypeReferenceId="givenName" />
            <OutputClaim ClaimTypeReferenceId="surname" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" DefaultValue="false" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile updates the profile for a user. -->
        <TechnicalProfile Id="SelfAsserted-ProfileUpdate">
          <DisplayName>User Profile Update</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.profileupdate</Item>
          </Metadata>
          <IncludeInSso>false</IncludeInSso>
          <InputClaims>
            <InputClaim ClaimTypeReferenceId="alternativeSecurityId" />
            <InputClaim ClaimTypeReferenceId="userPrincipalName" />
            <InputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
          </InputClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="extension_MarketingConsented" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserSelfAssertedProfileByObjectId-ThrowIfNotExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the social account provider. -->
    <ClaimsProvider>
      <DisplayName>Social Account</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile registers a social account. -->
        <TechnicalProfile Id="SocialAccount-Registration-UnverifiedEmail">
          <DisplayName>Social Account Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.socialaccount.registration</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserByAlternativeSecurityId-ThrowIfExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
        <!-- The following technical profile registers a social account. -->
        <TechnicalProfile Id="SocialAccount-Registration-VerifiedEmail">
          <DisplayName>Social Account Registration</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.Providers.SelfAssertedAttributeProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="ContentDefinitionReferenceId">api.selfasserted.consent</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
          </CryptographicKeys>
          <InputClaimsTransformations>
            <InputClaimsTransformation ReferenceId="CreateEmailFromEmailFromSocialAccount" />
          </InputClaimsTransformations>
          <InputClaims />
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" Required="true" />
            <OutputClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" DefaultValue="true" />
            <OutputClaim ClaimTypeReferenceId="newUser" />
            <OutputClaim ClaimTypeReferenceId="objectId" />
          </OutputClaims>
          <ValidationTechnicalProfiles>
            <ValidationTechnicalProfile ReferenceId="API-CheckEmailWebHook" />
            <ValidationTechnicalProfile ReferenceId="AAD-WriteUserByAlternativeSecurityId-ThrowIfExists" />
          </ValidationTechnicalProfiles>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the single sign-on (SSO) session provider. -->
    <ClaimsProvider>
      <DisplayName>SSO Session</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile manages the Azure Active Directory SSO session. -->
        <TechnicalProfile Id="SSO-AzureActiveDirectory">
          <DisplayName>Azure Active Directory Session Management</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="authenticationSource" />
            <PersistedClaim ClaimTypeReferenceId="executed-SelfAsserted-Input" />
            <PersistedClaim ClaimTypeReferenceId="identityProvider" />
            <PersistedClaim ClaimTypeReferenceId="newUser" />
            <PersistedClaim ClaimTypeReferenceId="objectId" />
            <PersistedClaim ClaimTypeReferenceId="signInName" />
            <PersistedClaim ClaimTypeReferenceId="tosVersionChanged" />
            <PersistedClaim ClaimTypeReferenceId="publishedTosVersion" />
            <PersistedClaim ClaimTypeReferenceId="extension_TermsOfServiceConsented" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="objectIdFromSession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
        <!-- The following technical profile manages a no-op SSO session. -->
        <TechnicalProfile Id="SSO-Noop">
          <DisplayName>Noop Session Management</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.NoopSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
        </TechnicalProfile>
        <!-- The following technical profile manages the social account login SSO session. -->
        <TechnicalProfile Id="SSO-SocialLogin">
          <DisplayName>Social Login Session Mananagement</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.ExternalLoginSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <Metadata>
            <Item Key="AlwaysFetchClaimsFromProvider">true</Item>
          </Metadata>
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="alternativeSecurityId" />
          </PersistedClaims>
        </TechnicalProfile>
        <!-- The following technical profile manages the social account registration SSO session. -->
        <TechnicalProfile Id="SSO-SocialRegistration">
          <IncludeTechnicalProfile ReferenceId="SSO-AzureActiveDirectory" />
        </TechnicalProfile>
        <!-- The following technical profile manages the verification phone SSO session. -->
        <TechnicalProfile Id="SSO-PhoneFactor">
          <DisplayName>Phone Factor Session Mananagement</DisplayName>
          <Protocol Name="Proprietary" Handler="Web.TPEngine.SSO.DefaultSSOSessionProvider, Web.TPEngine, Version=1.0.0.0, Culture=neutral, PublicKeyToken=null" />
          <PersistedClaims>
            <PersistedClaim ClaimTypeReferenceId="executed-PhoneFactor-Input" />
            <PersistedClaim ClaimTypeReferenceId="strongAuthenticationPhoneNumber" />
          </PersistedClaims>
          <OutputClaims>
            <OutputClaim ClaimTypeReferenceId="isActivePhoneFactorSession" DefaultValue="true" />
          </OutputClaims>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the token issuer provider. -->
    <ClaimsProvider>
      <DisplayName>Token Issuer</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile implements the JSON Web Token (JWT) token issuer. -->
        <TechnicalProfile Id="Token-JWT">
          <DisplayName>JSON Web Token Issuer</DisplayName>
          <Protocol Name="None" />
          <OutputTokenFormat>JWT</OutputTokenFormat>
          <Metadata>
            <Item Key="client_id">{service:te}</Item>
            <Item Key="issuer_refresh_token_user_identity_claim_type">objectId</Item>
          </Metadata>
          <CryptographicKeys>
            <Key Id="issuer_secret" StorageReferenceId="B2C_1A_TokenSigningKeyContainer" />
            <Key Id="issuer_refresh_token_key" StorageReferenceId="B2C_1A_TokenEncryptionKeyContainer" />
          </CryptographicKeys>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>

    <!-- The following claims provider defines the trust framework policy engine provider. -->
    <ClaimsProvider>
      <DisplayName>Trust Framework Policy Engine</DisplayName>
      <TechnicalProfiles>
        <!-- The following technical profile represents the trust framework policy engine. -->
        <TechnicalProfile Id="TpEngine_c3bd4fe2-1775-4013-b91d-35f16d377d13">
          <DisplayName>Trust Framework Policy Engine</DisplayName>
          <Protocol Name="None" />
          <Metadata>
            <Item Key="url">{service:te}</Item>
          </Metadata>
        </TechnicalProfile>
      </TechnicalProfiles>
    </ClaimsProvider>
  </ClaimsProviders>

  <UserJourneys>
    <!-- The following user journey is used for registering a local account via an activation link. This user journey requires the email
         address for the local account, to which the activation link has been sent, to be passed as an input claim called "extension_VerifiedEmail".
         See the "B2C_1A_activation" policy for an example of this.
         The high-level steps for this user journey are:
           1. The user confirms the email address for a local account to which the activation link has been sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user enters the new password for the local account. The local account is synchronized from the Azure Active Directory
              identity store to the SQL one with the new password.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="Activation">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordRecoveryVerifiedEmailExchange" TechnicalProfileReferenceId="LocalAccount-Activation" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the password for a user, identified by the object identifier
             for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. It can then
             update the password for the user in the SQL identity store.-->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordResetWithSSOSessionExchange" TechnicalProfileReferenceId="LocalAccount-PasswordSet" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountProfileRegistrationExchange" TechnicalProfileReferenceId="SelfAsserted-UserRegistration" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="8" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering a local or social account via an invitation link. This user journey requires
         the email address for the user, to which the invitation link has been sent, to be passed as an input claim called "extension_VerifiedEmail".
         See the "B2C_1A_invitation" policy for an example of this.
         The high-level steps for this user journey are:
           1. The user logs in or registers a local or social account. If the user logs in a local account and the local account does
              exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the
              SQL identity store to the Azure Active Directory one with the SQL-managed password. If the user registers a local account,
              then the local account is synchronized from the Azure Active Directory identity store to the SQL one with the Azure Active
              Directory-managed password. 
           2. If the user logs in a social account, then the email address that is associated with the social account must match the
              email address that is associated with the invitation link. If so, then the user profile is updated with the social account
              profile properties.
           3. If the user is required to consent to the current terms of service (i.e. if either the user is registering a new account
              or a new terms of service must be consented to), then the user is prompted to do so.
           4. If the user is registering a local account, then the email address that is associated with the social account must match
              the email address that is associated with the invitation link.
           5. If the user is required to register a profile (i.e., if the user is accessing the Lifeworks app for the first
              time), then the user is prompted to do so.
           6. If the user is required to register a verification phone, then the user is prompted to do so.
           7. A JWT is issued to the relying party. -->
    <UserJourney Id="Invitation">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountRegistrationExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Google account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is registering a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. -->
            <ClaimsExchange Id="LocalAccountRegistrationExchange" TechnicalProfileReferenceId="LocalAccount-Registration-VerifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdBeforeWriteUserExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a social account. It creates a user, identified
             by the alternative security identifier for the user, in the Azure Active Directory identity store. An error is raised if
             the user already exists. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedSocialAccountRegistrationVerifiedEmailExchange" TechnicalProfileReferenceId="SocialAccount-Registration-VerifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It updates the social account
             profile for the user, identified by the object identifier for the user, in the Azure Active Directory identity store. An
             error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAccountProfileByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAccountProfileByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It re-reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdAfterWriteUserExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>extension_TermsOfServiceConsented</Value>
              <Value>2017-03-09</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountProfileRegistrationExchange" TechnicalProfileReferenceId="SelfAsserted-UserRegistration" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="12" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for linking the local account for a user to the social account for the user.
         The high-level steps for this user journey are:
           1. The user logs in a local account. If the local account does exist in the SQL identity service but it does not exist in
              the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory one with
              the SQL-managed password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. The user logs in a social account.
           4. The local account is linked to the social account.
           5. A JWT is issued to the relying party. -->
    <UserJourney Id="Link">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is always executed. It can create the user in the Azure Active Directory identity store
                 if the user does not exist or update the password for the user in the Azure Active Directory identity store if the
                 user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdBeforeUserWriteExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to verify a verification phone. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="5" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is linking to a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the social account for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAlternativeAccountByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAlternativeAccountByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It re-reads the user, identified by the object identifier for the
             user, from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdAfterUserWriteExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="9" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for resetting the password for a local account.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account to which a verification code is to be sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. The user verifies the verification code that was sent to the email address for the local account and then enters the
              new password for the local account. The local account is synchronized from the Azure Active Directory identity store
              to the SQL one with the new password.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="PasswordReset">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordRecoveryUnverifiedEmailExchange" TechnicalProfileReferenceId="LocalAccount-PasswordRecovery" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to verify a verification phone. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the password for a user, identified by the object identifier
             for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. It can then
             update the password for the user in the SQL identity store.-->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountPasswordResetWithoutSSOSessionExchange" TechnicalProfileReferenceId="LocalAccount-PasswordReset" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for updating the profile for a user.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. The user updates their profile.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="ProfileUpdateForLifeworksApp">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="ClaimsProviderSelection" ContentDefinitionReferenceId="api.idpselection.signin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the local account profile for a user, identified by the
             object identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedProfileUpdateExchange" TechnicalProfileReferenceId="SelfAsserted-ProfileUpdate" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the Lifeworks app using an app code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account for which a verification code is to be verified. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the verification code.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForLifeworksAppUsingAppCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-AppCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the verification app for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AppFactorVerifyExchange" TechnicalProfileReferenceId="AppFactor-Verify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the verification app time step matched for the user, identified
             by the object identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAppByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAppByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the Lifeworks app using an Authy code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account for which an Authy code is to be verified. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the Authy code.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForLifeworksAppUsingAuthyCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-AuthyCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the Authy account for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthyFactorInputOrVerifyExchange" TechnicalProfileReferenceId="AuthyFactor-InputOrVerify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the Lifeworks app using an email code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account to which a verification code is to be sent. If the local account
              does exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from
              the SQL identity store to the Azure Active Directory one with a generated password.
           2. The user verifies the verification code that was sent to the email address for the local account.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForLifeworksAppUsingEmailCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountLoginEmailCodeExchange" TechnicalProfileReferenceId="LocalAccount-Login-EmailCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="3" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the Lifeworks app using either an email address or a phone number. -->
    <UserJourney Id="SignInForLifeworksAppUsingEmailOrPhone">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountDiscoveryExchange" TechnicalProfileReferenceId="LocalAccount-Discovery" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="2" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>signInNameIsSameAsEmail</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsProviderSelections>
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>signInNameIsSameAsPhone</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByPhoneNumberSignInName" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="5" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in a user to the Lifeworks app using a phone code.
         The high-level steps for this user journey are:
           1. The user enters the email address for a local account. If the local account does exist in the SQL identity service but
              it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active
              Directory one with a generated password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="SignInForLifeworksAppUsingPhoneCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. It can create the user in the Azure Active Directory identity store
             if the user does not exist.-->
        <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="LocalAccountIdentificationExchange" TechnicalProfileReferenceId="LocalAccount-Login-PhoneCode" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies the verification phone for the user. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It reads the user, identified by the object identifier for the user,
             from the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="4" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering, validating, and verifying a verification app.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the user logs in a local account and the local account does exist in the
              SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity
              store to the Azure Active Directory one with the SQL-managed password.
           2. The user verifies a verification phone.
           3. The user registers the verification app.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpForLifeworksAppUsingAppCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies a verification phone. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It generates a verification app secret key for the user. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsGenerateTotpWebHookExchange" TechnicalProfileReferenceId="API-GenerateTotpWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It registers a verification app. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AppFactorInputExchange" TechnicalProfileReferenceId="AppFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It updates the verification app for the user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAppByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAppByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="9" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for registering, validating, and verifying an Authy account.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the user logs in a local account and the local account does exist in the
              SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the SQL identity
              store to the Azure Active Directory one with the SQL-managed password.
           2. The user verifies a verification phone.
           3. The user registers the Authy account.
           4. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpForLifeworksAppUsingAuthyCode">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It verifies a verification phone. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It creates an Authy account for the user. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureFunctionsCreateAuthyUserWebHookExchange" TechnicalProfileReferenceId="API-CreateAuthyUserWebHook" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It registers the Authy account. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AuthyFactorInputOrVerifyExchange" TechnicalProfileReferenceId="AuthyFactor-InputOrVerify" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAuthyByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAuthyByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="9" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for logging in or registering a user to the Lifeworks app.
         The high-level steps for this user journey are:
           1. The user logs in or registers a local or social account. If the user logs in a local account and the local account does
              exist in the SQL identity service but it does not exist in the Azure Active Directory one, then it is migrated from the
              SQL identity store to the Azure Active Directory one with the SQL-managed password. If the user registers a local account,
              then the local account is synchronized from the Azure Active Directory identity store to the SQL one with the Azure Active Directory-managed
              password. 
           2. If the user logs in a social account, then the user profile is updated with the social account profile properties.
           3. If the user is required to consent to the current terms of service (i.e. if either the user is registering a new account
              or a new terms of service must be consented to), then the user is prompted to do so.
           4. If the user is registering a new account, then a mail message is sent to the user.
           5. If the user is required to register a profile (i.e., if the user is accessing the Lifeworks app for the first
              time), then the user is prompted to do so.
           6. If the user is required to register a verification phone, then the user is prompted to do so.
           7. A JWT is issued to the relying party. -->
    <UserJourney Id="SignUpOrSignInForLifeworksApp">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- <OrchestrationStep Order="1" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="TrackSignInRequest" TechnicalProfileReferenceId="Insights-SignInRequest" />
          </ClaimsExchanges>
        </OrchestrationStep> -->

        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection ValidationClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following orchestration step is only executed when the user is logging in a social account or registering a local account. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is registering a local account. It creates a user, identified
             by the email address for the user, in the Azure Active Directory identity store. An error is raised if the user already
             exists. It can then create the user in the existing identity store if the user does not exist or updates the password for
             the user in the existing identity store if the user does exist.-->
            <ClaimsExchange Id="LocalAccountRegistrationExchange" TechnicalProfileReferenceId="LocalAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdBeforeWriteUserExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a social account. It creates a user, identified
             by the alternative security identifier for the user, in the Azure Active Directory identity store. An error is raised if
             the user already exists. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>objectId</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedSocialAccountRegistrationUnverifiedEmailExchange" TechnicalProfileReferenceId="SocialAccount-Registration-UnverifiedEmail" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It updates the social account
             profile for the user, identified by the object identifier for the user, in the Azure Active Directory identity store. An
             error is raised if the user does not exist. -->
        <OrchestrationStep Order="6" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>newUser</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserAccountProfileByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserAccountProfileByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following orchestration step is only executed when the user is logging in a social account. It re-reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="7" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdAfterWriteUserExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following orchestration step is always executed. It gets the current published TOS Version. -->
        <OrchestrationStep Order="8" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="TermsOfServiceGetPublishedVersion" TechnicalProfileReferenceId="API-GetTosVersion" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to consent to terms of service. It updates
             the consent for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="9" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>tosVersionChanged</Value>
              <Value>False</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedConsentExchange" TechnicalProfileReferenceId="SelfAsserted-Consent" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step updates the local account profile for a user, identified by the object
             identifier for the user, in the Azure Active Directory identity store. An error is raised if the user does not exist. -->
        <OrchestrationStep Order="10" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="SelfAssertedLocalAccountProfileRegistrationExchange" TechnicalProfileReferenceId="SelfAsserted-UserRegistration" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is required to register a verification phone. -->
        <OrchestrationStep Order="11" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>isActivePhoneFactorSession</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="true">
              <Value>strongAuthenticationPhoneNumber</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorInputExchange" TechnicalProfileReferenceId="PhoneFactor-Input" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is registering a verification phone. It updates the verification
             phone number for the user, identified by the object identifier for the user, in the Azure Active Directory identity store.
             An error is raised if the user does not exist. -->
        <OrchestrationStep Order="12" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimsExist" ExecuteActionsIf="false">
              <Value>executed-PhoneFactor-Input</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryWriteUserPhoneNumberByObjectIdExchange" TechnicalProfileReferenceId="AAD-WriteUserPhoneNumberByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <OrchestrationStep Order="13" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="APIGetUserGuidGetWithObjectId" TechnicalProfileReferenceId="API-UserGuid" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="14" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="APIGetUserContext" TechnicalProfileReferenceId="API-UserContext" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <OrchestrationStep Order="15" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="APIGetUserPermissions" TechnicalProfileReferenceId="API-UserPermissions" />
          </ClaimsExchanges>
        </OrchestrationStep>

        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="16" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />

        <!-- <OrchestrationStep Order="15" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="TrackSignInComplete" TechnicalProfileReferenceId="Insights-SignInComplete" />
          </ClaimsExchanges>
        </OrchestrationStep> -->
      </OrchestrationSteps>
    </UserJourney>
    <!-- The following user journey is used for stepping up a user to the Lifeworks app.
         The high-level steps for this user journey are:
           1. The user logs in a local or social account. If the local account does exist in the SQL identity service but it does not
              exist in the Azure Active Directory one, then it is migrated from the SQL identity store to the Azure Active Directory
              one with the SQL-managed password.
           2. If the user account is protected with a verification phone, then the user verifies the verification phone.
           3. A JWT is issued to the relying party. -->
    <UserJourney Id="StepUp">
      <PreserveOriginalAssertion>false</PreserveOriginalAssertion>
      <OrchestrationSteps>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="1" Type="CombinedSignInAndSignUp" ContentDefinitionReferenceId="api.signupsignin">
          <ClaimsProviderSelections>
            <ClaimsProviderSelection TargetClaimsExchangeId="GoogleAccountExchange" />
            <ClaimsProviderSelection TargetClaimsExchangeId="LocalAccountLoginExchange" />
          </ClaimsProviderSelections>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. -->
        <OrchestrationStep Order="2" Type="ClaimsExchange">
          <ClaimsExchanges>
            <!-- The following claims exchange is executed when the user is logging in a Facebook account. -->
            <ClaimsExchange Id="GoogleAccountExchange" TechnicalProfileReferenceId="GoogleAccount-OAuth2" />
            <!-- The following claims exchange is executed when the user is logging in a local account. It can create the user in the
                 Azure Active Directory identity store if the user does not exist or update the password for the user in the Azure Active
                 Directory identity store if the user does exist. It then authenticates the local account. -->
            <ClaimsExchange Id="LocalAccountLoginExchange" TechnicalProfileReferenceId="LocalAccount-Login" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a local account. It reads the user, identified
             by the object identifier for the user, from the Azure Active Directory identity store. An error is raised if the user does
             not exist. -->
        <OrchestrationStep Order="3" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>socialAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByObjectIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByObjectId-ThrowIfNotExists" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is only executed when the user is logging in a social account. It reads the user, identified
             by the alternative security identifier for the user, from the Azure Active Directory identity store. -->
        <OrchestrationStep Order="4" Type="ClaimsExchange">
          <Preconditions>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>localAccountAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
            <Precondition Type="ClaimEquals" ExecuteActionsIf="true">
              <Value>authenticationSource</Value>
              <Value>evoStsAuthentication</Value>
              <Action>SkipThisOrchestrationStep</Action>
            </Precondition>
          </Preconditions>
          <ClaimsExchanges>
            <ClaimsExchange Id="AzureActiveDirectoryReadUserByAlternativeSecurityIdExchange" TechnicalProfileReferenceId="AAD-ReadUserByAlternativeSecurityId" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed to verify a verification phone. -->
        <OrchestrationStep Order="5" Type="ClaimsExchange">
          <ClaimsExchanges>
            <ClaimsExchange Id="PhoneFactorVerifyExchange" TechnicalProfileReferenceId="PhoneFactor-VerifyByAuthenticationPhoneNumber" />
          </ClaimsExchanges>
        </OrchestrationStep>
        <!-- The following orchestration step is always executed. It issues a JWT token to the relying party. -->
        <OrchestrationStep Order="6" Type="SendClaims" CpimIssuerTechnicalProfileReferenceId="Token-JWT" />
      </OrchestrationSteps>
    </UserJourney>
  </UserJourneys>
</TrustFrameworkPolicy>